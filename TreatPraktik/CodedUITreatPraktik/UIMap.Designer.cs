// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITreatPraktik
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfEdit uITbxFilterEdit = this.UIMainWindowWindow.UIItemCustom.UITbxFilterEdit;
            #endregion

            // Type 'Infection' in 'tbxFilter' text box
            uITbxFilterEdit.Text = this.RecordedMethod1Params.UITbxFilterEditText;

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WpfEdit uITbxFilterEdit = this.UIMainWindowWindow.UIItemCustom.UITbxFilterEdit;
            WinWindow uIMainWindowWindow1 = this.UIMainWindowWindow1;
            #endregion

            // Click 'tbxFilter' text box
            Mouse.Click(uITbxFilterEdit, new Point(96, 17));

            // Click 'MainWindow' window
            Mouse.Click(uIMainWindowWindow1, new Point(88, 8));

            // Type 'infection' in 'tbxFilter' text box
            uITbxFilterEdit.Text = this.RecordedMethod2Params.UITbxFilterEditText;

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfList uILstItemsList = this.UIMainWindowWindow.UIItemCustom.UILstItemsList;
            #endregion

            // Verify that the 'SelectedItemsAsString' property of 'lstItems' list box equals 'Place of acquisition'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UILstItemsListSelectedItemsAsString, uILstItemsList.SelectedItemsAsString);
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WpfEdit uITbxFilterEdit = this.UIMainWindowWindow.UIItemCustom.UITbxFilterEdit;
            WpfList uILstItemsList = this.UIMainWindowWindow.UIItemCustom.UILstItemsList;
            #endregion

            // Type 'infection' in 'tbxFilter' text box
            uITbxFilterEdit.Text = this.RecordedMethod3Params.UITbxFilterEditText;

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Right-Click 'lstItems' list box
            Mouse.Click(uILstItemsList, MouseButtons.Right, ModifierKeys.None, new Point(234, 169));

            // Right-Click 'lstItems' list box
            Mouse.Click(uILstItemsList, MouseButtons.Right, ModifierKeys.None, new Point(235, 169));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Infection' in 'tbxFilter' text box
        /// </summary>
        public string UITbxFilterEditText = "Infection";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'infection' in 'tbxFilter' text box
        /// </summary>
        public string UITbxFilterEditText = "infection";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItemsAsString' property of 'lstItems' list box equals 'Place of acquisition'
        /// </summary>
        public string UILstItemsListSelectedItemsAsString = "Place of acquisition";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'infection' in 'tbxFilter' text box
        /// </summary>
        public string UITbxFilterEditText = "infection";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.ItemFilter";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITbxFilterEdit
        {
            get
            {
                if ((this.mUITbxFilterEdit == null))
                {
                    this.mUITbxFilterEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITbxFilterEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbxFilter";
                    this.mUITbxFilterEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITbxFilterEdit;
            }
        }
        
        public WpfList UILstItemsList
        {
            get
            {
                if ((this.mUILstItemsList == null))
                {
                    this.mUILstItemsList = new WpfList(this);
                    #region Search Criteria
                    this.mUILstItemsList.SearchProperties[WpfList.PropertyNames.AutomationId] = "lstItems";
                    this.mUILstItemsList.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILstItemsList;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITbxFilterEdit;
        
        private WpfList mUILstItemsList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMainWindowWindow1 : WinWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
    }
}
